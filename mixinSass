//for example

@mixin backface-visibility {
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

.front, .back {
    width: 100%;
    height: 100%;
    position: absolute;
    @include backface-visibility;
  }

//mixin with value parameter

@mixin backface-visibility($visibility) {
  backface-visibility: $visibility;
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  -o-backface-visibility: $visibility;
}

.front, .back {
    width: 100%;
    height: 100%;
    position: absolute;
    @include backface-visibility(hidden);
  }

//mixin with default value parameter
@mixin backface-visibility($visibility: hidden) {}



In general, here are 5 important facts about arguments and mixins:

1. Mixins can take multiple arguments.
2. Sass allows you to explicitly define each argument in your @include statement.
3. When values are explicitly specified you can send them out of order.
4. If a mixin definition has a combination of arguments with and without a default value, 
    you should define the ones with no default value first.
5. Mixins can be nested.

@mixin dashed-border($width, $color: #FFF) {
  border: {
     color: $color;
     width: $width;
     style: dashed;
  }
}

span { //only passes non-default argument
    @include dashed-border(3px);
}

p { //passes both arguments
    @include dashed-border(3px, green);
}

div { //passes out of order but explicitly defined
   @include dashed-border(color: purple, width: 5px); 
}


//When we include our mixin, we can then pass in these arguments in a map with the following ... notation:

.definition {
      width: 100%;
      height: 100%;
      @include stripes($college-ruled-style...);
 }
//Note: Remember to always prioritize readability over writing less code. 
//This approach is only useful if you find it adds clarity to your codebase.
.definition {
    @include stripes($stripe-properties...);
  }

@mixin photo-content($file) {
  content: url(#{$file}.jpg); //string interpolation
  object-fit: cover;
}

//....

.photo { 
  @include photo-content('titanosaur');
  width: 60%;
  margin: 0px auto; 
  }
  
  
This lesson has introduced you to some of the most powerful concepts Sass has to offer!

Mixins are a powerful tool that allow you to keep your code DRY. Their ability to take in arguments, assign default values to those arguments, and accept said arguments in whatever format is most readable and convenient for you makes the mixin Sass's most popular directive.
The & selector* is a Sass construct that allows for expressive flexibility by referencing the parent selector when working with CSS psuedo elements and classes.
String interpolation is the glue that allows you to insert a string in the middle of another when it is in a variable format. Its applications vary, but the ability to interpolate is especially useful for passing in file names.
Let's keep up the awesome job in the next lesson, where we will learn about functions, arithmetic, and color operations in Sass!
